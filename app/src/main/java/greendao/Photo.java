package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PHOTO.
 */
public class Photo {

    private Long id;
    private String path;
    private Long folderId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PhotoDao myDao;

    private Folder folder;
    private Long folder__resolvedKey;


    public Photo() {
    }

    public Photo(Long id) {
        this.id = id;
    }

    public Photo(Long id, String path, Long folderId) {
        this.id = id;
        this.path = path;
        this.folderId = folderId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPhotoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public Long getFolderId() {
        return folderId;
    }

    public void setFolderId(Long folderId) {
        this.folderId = folderId;
    }

    /** To-one relationship, resolved on first access. */
    public Folder getFolder() {
        Long __key = this.folderId;
        if (folder__resolvedKey == null || !folder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FolderDao targetDao = daoSession.getFolderDao();
            Folder folderNew = targetDao.load(__key);
            synchronized (this) {
                folder = folderNew;
            	folder__resolvedKey = __key;
            }
        }
        return folder;
    }

    public void setFolder(Folder folder) {
        synchronized (this) {
            this.folder = folder;
            folderId = folder == null ? null : folder.getId();
            folder__resolvedKey = folderId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
